midpoint = 0,
n.breaks = 7,
na.value = "grey95") +
labs(title = NULL,
fill = "Normalised\nEnrichment\nScore") +
theme_void()
gsea_plots[[3]] <- ggplot() +
geom_sf(data = gsea_map,
aes(geometry = data$geometry,
fill = data$p.adjust),
colour = "grey30",
show.legend = TRUE) +
scale_fill_viridis_c(option = "magma",
na.value = "grey95") +
labs(title = NULL,
fill = "Adjusted\np-value") +
theme_void()
gsea_plots[[4]] <- ggplot() +
geom_sf(data = gsea_map,
aes(geometry = data$geometry,
fill = data$rank),
colour = "grey30",
show.legend = TRUE) +
scale_fill_viridis_c(option = "magma",
na.value = "grey95") +
labs(title = NULL,
fill = "Rank") +
theme_void()
gsea_plots[[5]] <- ggplot() +
geom_sf(data = gsea_map,
aes(geometry = data$geometry,
fill = as.factor(data$genes_no)),
colour = "grey30",
show.legend = TRUE) +
scale_fill_viridis_d(option = "magma",
na.value = "grey95") +
labs(title = NULL,
fill = "Number of\ngenes from\nranked list") +
theme_void() +
ggplot2::guides(fill = ggplot2::guide_legend(ncol = n_cols1, byrow = TRUE))
gsea_plots[[6]] <- ggplot() +
geom_sf(data = gsea_map,
aes(geometry = data$geometry,
fill = as.factor(data$setSize)),
colour = "grey30",
show.legend = TRUE) +
scale_fill_viridis_d(option = "magma",
na.value = "grey95") +
labs(title = NULL,
fill = "Gene set\nSize") +
theme_void() +
ggplot2::guides(fill = ggplot2::guide_legend(ncol = n_cols2, byrow = TRUE))
print(names(gsea_plots))
print(gsea_plots)
print(str(gsea_plots))
## Arrange plots
gridExtra::grid.arrange(grobs = gsea_plots, nrow = 2, ncol = 3)
}
plotGWPCA_FuncCLust(gsea_map, count = 5, legend = "right")
#' clustering results.
#'
#' @examples
#' # Example usage:
#' # plotGWPCA_FuncCLust(gsea_map, count = 5, legend = "right")
#'
#' @keywords plot visualisation functional clustering gwpca gsea
#' @family Spatial Transcriptomics Analysis
#'
#' @export
plotGWPCA_FuncCLust <- function(gsea_map, count = 5, legend) {
## The Legend labels
lookup <- c(cluster = "Var1", count = "Freq")
spot_labels <- data.frame(table(gsea_map$cluster)) %>%
dplyr::rename(all_of(lookup)) %>%
dplyr::arrange(dplyr::desc(count)) %>%
mutate(show = ifelse(count > count, TRUE, FALSE))
## The legend breaks:
spot_breaks <- spot_labels %>%
dplyr::filter(.data$show == TRUE) %>%
dplyr::arrange(.data$cluster) %>%
dplyr::select(.data$cluster) %>%
.[["cluster"]] %>%
as.vector()
n_cols1 <- ceiling(length(unique(gsea_map$genes_no)) / 10)
n_cols2 <- ceiling(length(unique(gsea_map$setSize)) / 10)
## The colours:
col_No <- length(unique(gsea_map$cluster))
colour_values <- getColours(col_No)
names(colour_values) <- spot_labels$cluster
## The plots:
gsea_plots <- list()
gsea_plots[[1]] <- ggplot() +
geom_sf(data = gsea_map,
aes(geometry = data$geometry,
fill = data$cluster),
colour = "grey30",
show.legend = TRUE) +
scale_fill_manual(values = colour_values,
breaks = spot_breaks,
na.value = "grey95") +
labs(title = NULL,
fill = legend) +
theme_void() +
theme(legend.position = "right")
gsea_plots[[2]] <- ggplot() +
geom_sf(data = gsea_map,
aes(geometry = data$geometry,
fill = data$NES),
colour = "grey30",
show.legend = TRUE) +
scale_fill_gradient2(high = "#B2182B",
mid = "#F7F7F7",
low = "#2166AC",
midpoint = 0,
n.breaks = 7,
na.value = "grey95") +
labs(title = NULL,
fill = "Normalised\nEnrichment\nScore") +
theme_void()
gsea_plots[[3]] <- ggplot() +
geom_sf(data = gsea_map,
aes(geometry = data$geometry,
fill = data$p.adjust),
colour = "grey30",
show.legend = TRUE) +
scale_fill_viridis_c(option = "magma",
na.value = "grey95") +
labs(title = NULL,
fill = "Adjusted\np-value") +
theme_void()
gsea_plots[[4]] <- ggplot() +
geom_sf(data = gsea_map,
aes(geometry = data$geometry,
fill = data$rank),
colour = "grey30",
show.legend = TRUE) +
scale_fill_viridis_c(option = "magma",
na.value = "grey95") +
labs(title = NULL,
fill = "Rank") +
theme_void()
gsea_plots[[5]] <- ggplot() +
geom_sf(data = gsea_map,
aes(geometry = data$geometry,
fill = as.factor(data$genes_no)),
colour = "grey30",
show.legend = TRUE) +
scale_fill_viridis_d(option = "magma",
na.value = "grey95") +
labs(title = NULL,
fill = "Number of\ngenes from\nranked list") +
theme_void() +
ggplot2::guides(fill = ggplot2::guide_legend(ncol = n_cols1, byrow = TRUE))
gsea_plots[[6]] <- ggplot() +
geom_sf(data = gsea_map,
aes(geometry = data$geometry,
fill = as.factor(data$setSize)),
colour = "grey30",
show.legend = TRUE) +
scale_fill_viridis_d(option = "magma",
na.value = "grey95") +
labs(title = NULL,
fill = "Gene set\nSize") +
theme_void() +
ggplot2::guides(fill = ggplot2::guide_legend(ncol = n_cols2, byrow = TRUE))
print(str(gsea_plots))
## Arrange plots
gridExtra::grid.arrange(grobs = gsea_plots, nrow = 2, ncol = 3)
}
plotGWPCA_FuncCLust(gsea_map, count = 5, legend = "right")
#' clustering results.
#'
#' @examples
#' # Example usage:
#' # plotGWPCA_FuncCLust(gsea_map, count = 5, legend = "right")
#'
#' @keywords plot visualisation functional clustering gwpca gsea
#' @family Spatial Transcriptomics Analysis
#'
#' @export
plotGWPCA_FuncCLust <- function(gsea_map, count = 5, legend) {
## The Legend labels
lookup <- c(cluster = "Var1", count = "Freq")
spot_labels <- data.frame(table(gsea_map$cluster)) %>%
dplyr::rename(all_of(lookup)) %>%
dplyr::arrange(dplyr::desc(count)) %>%
mutate(show = ifelse(count > count, TRUE, FALSE))
## The legend breaks:
spot_breaks <- spot_labels %>%
dplyr::filter(.data$show == TRUE) %>%
dplyr::arrange(.data$cluster) %>%
dplyr::select(.data$cluster) %>%
.[["cluster"]] %>%
as.vector()
n_cols1 <- ceiling(length(unique(gsea_map$genes_no)) / 10)
n_cols2 <- ceiling(length(unique(gsea_map$setSize)) / 10)
## The colours:
col_No <- length(unique(gsea_map$cluster))
colour_values <- getColours(col_No)
names(colour_values) <- spot_labels$cluster
## The plots:
gsea_plots <- list()
gsea_plots[[1]] <- ggplot() +
geom_sf(data = gsea_map,
aes(geometry = data$geometry,
fill = data$cluster),
colour = "grey30",
show.legend = TRUE) +
scale_fill_manual(values = colour_values,
breaks = spot_breaks,
na.value = "grey95") +
labs(title = NULL,
fill = legend) +
theme_void() +
theme(legend.position = "right")
print(gsea_plots[[1]])
gsea_plots[[2]] <- ggplot() +
geom_sf(data = gsea_map,
aes(geometry = data$geometry,
fill = data$NES),
colour = "grey30",
show.legend = TRUE) +
scale_fill_gradient2(high = "#B2182B",
mid = "#F7F7F7",
low = "#2166AC",
midpoint = 0,
n.breaks = 7,
na.value = "grey95") +
labs(title = NULL,
fill = "Normalised\nEnrichment\nScore") +
theme_void()
gsea_plots[[3]] <- ggplot() +
geom_sf(data = gsea_map,
aes(geometry = data$geometry,
fill = data$p.adjust),
colour = "grey30",
show.legend = TRUE) +
scale_fill_viridis_c(option = "magma",
na.value = "grey95") +
labs(title = NULL,
fill = "Adjusted\np-value") +
theme_void()
gsea_plots[[4]] <- ggplot() +
geom_sf(data = gsea_map,
aes(geometry = data$geometry,
fill = data$rank),
colour = "grey30",
show.legend = TRUE) +
scale_fill_viridis_c(option = "magma",
na.value = "grey95") +
labs(title = NULL,
fill = "Rank") +
theme_void()
gsea_plots[[5]] <- ggplot() +
geom_sf(data = gsea_map,
aes(geometry = data$geometry,
fill = as.factor(data$genes_no)),
colour = "grey30",
show.legend = TRUE) +
scale_fill_viridis_d(option = "magma",
na.value = "grey95") +
labs(title = NULL,
fill = "Number of\ngenes from\nranked list") +
theme_void() +
ggplot2::guides(fill = ggplot2::guide_legend(ncol = n_cols1, byrow = TRUE))
gsea_plots[[6]] <- ggplot() +
geom_sf(data = gsea_map,
aes(geometry = data$geometry,
fill = as.factor(data$setSize)),
colour = "grey30",
show.legend = TRUE) +
scale_fill_viridis_d(option = "magma",
na.value = "grey95") +
labs(title = NULL,
fill = "Gene set\nSize") +
theme_void() +
ggplot2::guides(fill = ggplot2::guide_legend(ncol = n_cols2, byrow = TRUE))
## Arrange plots
gridExtra::grid.arrange(grobs = gsea_plots, nrow = 2, ncol = 3)
}
plotGWPCA_FuncCLust(gsea_map, count = 5, legend = "right")
#' clustering results.
#'
#' @examples
#' # Example usage:
#' # plotGWPCA_FuncCLust(gsea_map, count = 5, legend = "right")
#'
#' @keywords plot visualisation functional clustering gwpca gsea
#' @family Spatial Transcriptomics Analysis
#'
#' @export
plotGWPCA_FuncCLust <- function(gsea_map, count = 5, legend) {
## The Legend labels
lookup <- c(cluster = "Var1", count = "Freq")
spot_labels <- data.frame(table(gsea_map$cluster)) %>%
dplyr::rename(all_of(lookup)) %>%
dplyr::arrange(dplyr::desc(count)) %>%
mutate(show = ifelse(count > count, TRUE, FALSE))
## The legend breaks:
spot_breaks <- spot_labels %>%
dplyr::filter(.data$show == TRUE) %>%
dplyr::arrange(.data$cluster) %>%
dplyr::select(.data$cluster) %>%
.[["cluster"]] %>%
as.vector()
n_cols1 <- ceiling(length(unique(gsea_map$genes_no)) / 10)
n_cols2 <- ceiling(length(unique(gsea_map$setSize)) / 10)
## The colours:
col_No <- length(unique(gsea_map$cluster))
colour_values <- getColours(col_No)
names(colour_values) <- spot_labels$cluster
## The plots:
gsea_plots <- list()
gsea_plots[[1]] <- ggplot() +
geom_sf(data = gsea_map,
aes(geometry = geometry,
fill = cluster),
colour = "grey30",
show.legend = TRUE) +
scale_fill_manual(values = colour_values,
breaks = spot_breaks,
na.value = "grey95") +
labs(title = NULL,
fill = legend) +
theme_void() +
theme(legend.position = "right")
gsea_plots[[2]] <- ggplot() +
geom_sf(data = gsea_map,
aes(geometry = geometry,
fill = NES),
colour = "grey30",
show.legend = TRUE) +
scale_fill_gradient2(high = "#B2182B",
mid = "#F7F7F7",
low = "#2166AC",
midpoint = 0,
n.breaks = 7,
na.value = "grey95") +
labs(title = NULL,
fill = "Normalised\nEnrichment\nScore") +
theme_void()
gsea_plots[[3]] <- ggplot() +
geom_sf(data = gsea_map,
aes(geometry = geometry,
fill = p.adjust),
colour = "grey30",
show.legend = TRUE) +
scale_fill_viridis_c(option = "magma",
na.value = "grey95") +
labs(title = NULL,
fill = "Adjusted\np-value") +
theme_void()
gsea_plots[[4]] <- ggplot() +
geom_sf(data = gsea_map,
aes(geometry = geometry,
fill = rank),
colour = "grey30",
show.legend = TRUE) +
scale_fill_viridis_c(option = "magma",
na.value = "grey95") +
labs(title = NULL,
fill = "Rank") +
theme_void()
gsea_plots[[5]] <- ggplot() +
geom_sf(data = gsea_map,
aes(geometry = geometry,
fill = as.factor(genes_no)),
colour = "grey30",
show.legend = TRUE) +
scale_fill_viridis_d(option = "magma",
na.value = "grey95") +
labs(title = NULL,
fill = "Number of\ngenes from\nranked list") +
theme_void() +
ggplot2::guides(fill = ggplot2::guide_legend(ncol = n_cols1, byrow = TRUE))
gsea_plots[[6]] <- ggplot() +
geom_sf(data = gsea_map,
aes(geometry = geometry,
fill = as.factor(setSize)),
colour = "grey30",
show.legend = TRUE) +
scale_fill_viridis_d(option = "magma",
na.value = "grey95") +
labs(title = NULL,
fill = "Gene set\nSize") +
theme_void() +
ggplot2::guides(fill = ggplot2::guide_legend(ncol = n_cols2, byrow = TRUE))
## Arrange plots
gridExtra::grid.arrange(grobs = gsea_plots, nrow = 2, ncol = 3)
}
plotGWPCA_FuncCLust(gsea_map, count = 5, legend = "right")
source("~/Library/CloudStorage/OneDrive-NewcastleUniversity/Projects/STExplorer/R/gwpca_plot.R")
rm(plotGWPCA_discr, plotGWPCA_discrHeatmap, plotGWPCA_global, plotGWPCA_leadingG, plotGWPCA_ptv, .int_generate_plot, plotGWPCA_FuncCLust)
c(kind = 'u', ncluster = 2, m = 2, distance = 'euclidean', order = 2, alpha = 0.7, a = 1, b = 1,
max.iter = 500, error = 1e-5, randomN = 1)
SummarizedExperiment::assays(sfe)
head(assay(sfe, "logcounts"))
colGeometries(sfe)
#' @seealso \code{\link[SpatialFeatureExperiment]{colData}},
#' \code{\link{as.data.frame}}, \code{\link[dplyr]{filter}},
#' \code{\link[dplyr]{left_join}}
#'
#' @author Eleftherios (Lefteris) Zormpas
#'
#' @keywords FGWC, normalised counts, markers, SpatialFeatureExperiment
#'
#' @rdname dot-int_fgwcMarkerCounts
#'
.int_fgwcMarkerCounts <- function(sfe, markers) {
## Get normalised counts
counts <- assay(sfe, "logcounts") %>%
as(., "matrix") %>%
as.data.frame() %>%
## Get Genes Of Interest (GOI)
dplyr::filter(rownames(.) %in% markers$ensg.ID) %>%
## Get GOI ENSG.IDs to a column
tibble::rownames_to_column(var = "ensg.ID") %>%
## Join with annotations
dplyr::left_join(.,
markers[,c("gene.name", "ensg.ID")],
by = dplyr::join_by("ensg.ID")) %>%
## Remove ENSG.IDs
dplyr::select(-"ensg.ID") %>%
## Bring gene names column to the front
dplyr::relocate("gene.name") %>%
## Populate rownames with gene names
tibble::column_to_rownames("gene.name") %>%
## Transpose to make it observation x variable
t() %>%
as.data.frame()
return(counts)
}
sfe_nmf <- fgwc_nmf(sfe, sample_id = "JBO022", top_hvgs = top_hvgs[["JBO022"]])
fgwc_param <- fgwc_params(algorithm = "classic", ncluster = 5)
fgwc <- fgwcSTE(sfe, "JBO022", data = sfe_nmf, dMetric = "euclidean", fgwc_param = fgwc_param)
## Load the liver markers example dataset
markers <- data(markers)
## Plot the heatmap
heatmap <- plotFGWC_heatmap(fgwc = fgwc, m_sfe = sfe, sample_id = "JBO022", markers = markers, cluster_no = 3)
load("~/Library/CloudStorage/OneDrive-NewcastleUniversity/Projects/STExplorer/data/markers.rda")
View(markers)
## Plot the heatmap
heatmap <- plotFGWC_heatmap(fgwc = fgwc, m_sfe = sfe, sample_id = "JBO022", markers = markers, cluster_no = 3)
#' @seealso \code{\link[SpatialFeatureExperiment]{colData}},
#' \code{\link{as.data.frame}}, \code{\link[dplyr]{filter}},
#' \code{\link[dplyr]{left_join}}
#'
#' @author Eleftherios (Lefteris) Zormpas
#'
#' @keywords FGWC, normalised counts, markers, SpatialFeatureExperiment
#'
#' @rdname dot-int_fgwcMarkerCounts
#'
.int_fgwcMarkerCounts <- function(sfe, markers) {
## Get normalised counts
counts <- assay(sfe, "logcounts") %>%
as(., "matrix") %>%
as.data.frame() %>%
## Get Genes Of Interest (GOI)
dplyr::filter(rownames(.) %in% markers$ensg.ID) %>%
## Get GOI ENSG.IDs to a column
tibble::rownames_to_column(var = "ensg.ID") %>%
## Join with annotations
dplyr::left_join(.,
markers[,c("gene.name", "ensg.ID")],
by = dplyr::join_by("ensg.ID")) %>%
## Remove ENSG.IDs
dplyr::select(-"ensg.ID") %>%
## Bring gene names column to the front
dplyr::relocate("gene.name") %>%
## Populate rownames with gene names
tibble::column_to_rownames("gene.name") %>%
## Transpose to make it observation x variable
t() %>%
as.data.frame()
return(counts)
}
## Plot the heatmap
heatmap <- plotFGWC_heatmap(fgwc = fgwc, m_sfe = sfe, sample_id = "JBO022", markers = markers, cluster_no = 3)
## To install the stable version of the package from Bioconductor run the below:
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
#
# BiocManager::install("STExplorer")
## To install the development version of the package form GitHub run the below:
if (!require("devtools", quietly = TRUE))
install.packages("devtools")
devtools::install_github("LefterisZ/STExplorer",
auth_token = "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",
force = TRUE)
## To load the package use:
library(STExplorer)
## Plot the heatmap
heatmap <- plotFGWC_heatmap(fgwc = fgwc, m_sfe = sfe, sample_id = "JBO022", markers = markers, cluster_no = 3)
STExplorer:::.int_fgwcMarkerCounts
devtools::document()
## To install the stable version of the package from Bioconductor run the below:
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
#
# BiocManager::install("STExplorer")
## To install the development version of the package form GitHub run the below:
if (!require("devtools", quietly = TRUE))
install.packages("devtools")
devtools::install_github("LefterisZ/STExplorer",
auth_token = "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",
force = TRUE)
## To load the package use:
library(STExplorer)
STExplorer:::.int_fgwcMarkerCounts
## Plot the heatmap
heatmap <- plotFGWC_heatmap(fgwc = fgwc, m_sfe = sfe, sample_id = "JBO022", markers = markers, cluster_no = 3)
