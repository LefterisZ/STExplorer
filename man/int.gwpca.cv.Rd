% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gwpcaSTE.R
\name{int.gwpca.cv}
\alias{int.gwpca.cv}
\title{Internal: Corss Validation}
\usage{
int.gwpca.cv(i, .bw, .x, .dMat, .k, .kernel, .adaptive, .pcafun)
}
\arguments{
\item{i}{The index of the evaluation location.}

\item{.bw}{The bandwidth parameter.}

\item{.x}{The data matrix.}

\item{.dMat}{The distance matrix.}

\item{.k}{The number of components to retain.}

\item{.kernel}{The kernel function to use for weighting.}

\item{.adaptive}{Logical indicating if adaptive bandwidth should be used.}

\item{.pcafun}{The PCA function to use.}
}
\value{
The cross-validation result as a vector.
}
\description{
IMPORTANT: this function is not exported to be used alone.
Internal function used in the Geographically Weighted Principal Component
Analysis (GWPCA) cross-validation.
}
\details{
This internal function performs cross-validation for a given evaluation
location.
It takes the index of the evaluation location (i) and calculates the weights
using the specified bandwidth (.bw), distance matrix (.dMat), kernel function
(.kernel), and adaptive bandwidth flag (.adaptive). The weight for the
evaluation location (i) is set to 0 to exclude it from the calculation.
The function checks if the number of neighboring locations with positive
weights is greater than 1, and if not, returns an infinite value for the
cross-validation result and displays a warning message. The PCA function
(.pcafun) is applied to the subset of data with positive weights,
and the eigenvectors are obtained. The eigenvectors are then used to
calculate the cross-validation result based on the squared difference
between the original data at the evaluation location (i) and the data
reconstructed using the eigenvectors.
}
\author{
Eleftherios (Lefteris) Zormpas
}
\keyword{internal}
